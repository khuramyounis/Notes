import dependencies.*

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdk(Versions.compilesdk)

    defaultConfig {
        applicationId(Application.id)
        minSdk(Versions.minsdk)
        targetSdk(Versions.targetsdk)
        versionCode(Application.version_code)
        versionName(Application.version_name)

        testInstrumentationRunner(AndroidTestDependencies.instrumentation_runner)
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        test.resources.srcDirs += 'src/test/res'
    }

    // remove need for apply plugin: 'de.mannodermaus.android-junit5'
    testOptions {
        animationsDisabled = true
        unitTests.all {
            useJUnitPlatform()
        }
    }

    packagingOptions {
        pickFirst "META-INF/LICENSE.md"
        pickFirst "MANIFEST.MF"
        pickFirst "META-INF/LICENSE-notice.md"
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    //Kotlin
    implementation(Dependencies.ktx)

    //Support
    implementation(SupportDependencies.appcompat)
    implementation(SupportDependencies.material_design)
    implementation(SupportDependencies.constraintlayout)
    implementation(SupportDependencies.swipe_refresh_layout)

    //Dependencies
    implementation(Dependencies.dagger)
    implementation platform(Dependencies.firebase_bom)
    implementation(Dependencies.firebase_firestore)
    implementation(Dependencies.firebase_auth)
    implementation(Dependencies.firebase_analytics)
    implementation(Dependencies.firebase_crashlytics)
    implementation(Dependencies.retrofit)
    implementation(Dependencies.retrofit_gson)
    implementation(Dependencies.room_ktx)
    implementation(Dependencies.room_runtime)
    implementation(Dependencies.navigation_ui)
    implementation(Dependencies.navigation_fragment)
    implementation(Dependencies.navigation_dynamic)
    implementation(Dependencies.material_dialogs)
    implementation(Dependencies.material_dialogs_input)
    implementation(AndroidTestDependencies.idling_resource)

    //using await with firebase function
    implementation(Dependencies.kotlin_coroutines_play_services)

    //Annotation Processing
    kapt(AnnotationProcessing.dagger_compiler)
    kapt(AnnotationProcessing.room_compiler)

    // Unit Tests
    testImplementation(TestDependencies.mockk)
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever-core:1.0.15'
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever-native:1.0.15'
    testImplementation(TestDependencies.jupiter_api)
    testImplementation(TestDependencies.jupiter_params)
    testImplementation(TestDependencies.junit4)
    testRuntimeOnly(TestDependencies.jupiter_engine)

    androidTestImplementation(AndroidTestDependencies.kotlin_test)
    androidTestImplementation(AndroidTestDependencies.coroutines_test)
    androidTestImplementation(AndroidTestDependencies.espresso_core)
    androidTestImplementation(AndroidTestDependencies.espresso_contrib){
        exclude module: "protobuf-lite"
    }
    androidTestImplementation(AndroidTestDependencies.idling_resource)
    androidTestImplementation(AndroidTestDependencies.mockk_android)
    androidTestImplementation(AndroidTestDependencies.test_runner)
    androidTestImplementation(AndroidTestDependencies.test_rules)
    androidTestImplementation(AndroidTestDependencies.text_core_ktx)
    androidTestImplementation(AndroidTestDependencies.navigation_testing)
    debugImplementation(AndroidTestDependencies.fragment_testing)
    kaptAndroidTest(AnnotationProcessing.dagger_compiler)
}